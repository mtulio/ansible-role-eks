---
- set_fact:
    eks_ec2_userdata_group: |
      # Applying custom labels to the node
      until kubectl --kubeconfig=/var/lib/kubelet/kubeconfig get nodes $(hostname) > /dev/null 2>&1
      do
          sleep 1
      done
      kubectl --kubeconfig=/var/lib/kubelet/kubeconfig \
        label nodes $(hostname) \
        {{ item.worker_labels | join(' ') }}
      /opt/aws/bin/cfn-signal --exit-code $? \
          --stack  ${AWS::StackName} \
          --resource NodeGroup  \
          --region ${AWS::Region}

- name: Setup Launch Configuration
  ec2_lc:
    name: "{{ item.name }}"
    image_id: "{{ item.ami_id }}"
    key_name: "{{ item.key_name |d(omit) }}"
    security_groups: "{{ item.security_groups }}"
    instance_type: "{{ item.instance_type }}"
    volumes: "{{ item.volumes |d([]) }}"
    vpc_id: "{{ eks_vpc_id }}"
    instance_profile_name: "{{ item.profile_name }}"
    instance_monitoring: "{{ item.assign_public_ip |d(true) }}"
    assign_public_ip: "{{ item.assign_public_ip |d(false) }}"
    spot_price: "{{ item.spot_price |d(omit) }}"
    user_data: |
      #!/bin/bash
      set -o xtrace
      /etc/eks/bootstrap.sh {{ eks_cluster_name }}
      {{ eks_ec2_userdata }}
      {{ eks_ec2_userdata_group }}

- name: Setup Auto Scaling Group
  ec2_asg:
    name: "{{ item.name }}"
    launch_config_name: "{{ item.name }}"
    health_check_period: "{{ item.hc_period }}"
    health_check_type: "{{ item.hc_type }}"
    replace_all_instances: "{{ item.replace |d(omit) }}"
    min_size: "{{ item.asg_min_size }}"
    max_size: "{{ item.asg_max_size }}"
    desired_capacity: "{{ item.asg_desired }}"
    region: "{{ eks_region }}"
    availability_zones: "{{ item.availability_zones |d(omit) }}"
    vpc_zone_identifier: "{{ item.subnets |d(omit) }}"
    tags: "{{ item.tags |d(omit) }}"
    wait_for_instances: false
